// Copyright (c) 2007 Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import C_Time, Exceptions, Strings




class Time_Exception(Exceptions::User_Exception):
    pass




class Instant:

    func init(self, sec, nsec):
    
        if nsec < 0 | nsec >= 100000*10000:
            raise Time_Exception.new("Invalid nsec value")
    
        self.sec := sec
        self.nsec := nsec



    func to_str(self):
    
        return Strings::format("<Instance %ds %dns>", self.sec, self.nsec)



    func ==(self, o):
    
        if self.sec == o.sec & self.nsec == o.nsec:
            return 1
        
        fail



    func !=(self, o):
    
        if self.sec != o.sec | self.nsec != o.nsec:
            return 1
        
        fail



    func <(self, o):
    
        if self.sec < o.sec:
            return 1
        elif self.sec == o.sec & self.nsec < o.nsec:
            return 1
        
        fail



    func >(self, o):
    
        if self.sec > o.sec:
            return 1
        elif self.sec == o.sec & self.nsec > o.nsec:
            return 1
        
        fail



    func -(self, o):
    
        if self.nsec - o.nsec < 0:
            return mk_timespec(self.sec - o.sec - 1, (100000*10000) + (self.nsec - o.nsec))
        else:
            return mk_timespec(self.sec - o.sec, self.nsec - o.nsec)



    func as_float(self):
    
        return self.sec + self.nsec / (100000*10000)




func current():

    return Instant.new.apply(C_Time::current())



func current_mono():

    return Instant.new.apply(C_Time::current_mono())



func mk_timespec(sec, nsec):

    return Instant.new(sec, nsec)
